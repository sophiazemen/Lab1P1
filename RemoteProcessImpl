import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class RemoteProcessImpl extends UnicastRemoteObject implements RemoteProcess {
    private VectorClock vectorClock;
    private int processId;

    public RemoteProcessImpl(int processId, VectorClock vectorClock) throws RemoteException {
        this.vectorClock = vectorClock;
        this.processId = processId;
    }

    @Override
    public int[] getVectorClock() throws RemoteException {
        return vectorClock.getClock();
    }

    @Override
    public void sendEvent(int targetProcessId, String message) throws RemoteException {
        // Increment local clock
        vectorClock.increment(this.processId);

        try {
            // Lookup the target process using RMI
            RemoteProcess targetProcess = (RemoteProcess) Naming.lookup("//localhost/Process" + targetProcessId);

            // Send the message and current vector clock to the target process
            targetProcess.receiveMessage(this.processId, message, vectorClock.getClock());

            System.out.println("Process " + this.processId + " sent message to Process " + targetProcessId + ": " + message);
            System.out.println("Updated vector clock: " + displayClock(vectorClock.getClock()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void receiveMessage(int senderId, String message, int[] receivedClock) throws RemoteException {
        // Update local clock
        vectorClock.update(receivedClock);
        vectorClock.increment(this.processId); // Increment after receiving

        System.out.println("Process " + this.processId + " received message from Process " + senderId + ": " + message);
        System.out.println("Updated vector clock: " + displayClock(vectorClock.getClock()));
    }

    private String displayClock(int[] clock) {
        StringBuilder sb = new StringBuilder();
        for (int value : clock) {
            sb.append(value).append(" ");
        }
        return sb.toString();
    }
}
